# template-terraform-deploy.yml
# parameters values will be passed from the main/parent yaml template.
parameters:
  environment: dev
  environmentDisplayName: Development
  backendServiceArm: ''   # Azure DevOps Service Connection
  backendAzureRmResourceGroupName: 'resourcegroup-tfstate'
  backendAzureRmStorageAccountName: 'terraformtfstate'
  backendAzureRmContainerName: 'tfstate'
  backendAzureRmKey: 'dev.tfstate'
  workingDirectory: 'terraform'
  dependsOn: []

stages:
- stage: ${{ parameters.environment }}
  displayName: Deploy to ${{ parameters.environmentDisplayName }}
  dependsOn: ${{ parameters.dependsOn }}
  jobs:
  - job: Terraform_Plan
    displayName: Terraform Init, Plan & Apply
    pool:
      vmImage: ubuntu-latest

    steps:
    # Install Terraform (choose version as per your TF code)
    - task: TerraformInstaller@1
      displayName: Install Terraform v1.3.9
      inputs:
        terraformVersion: '1.3.9'

    # Terraform Init with Azure Backend
    - task: TerraformTaskV2@2
      displayName: terraform init with Azure backend
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: ${{ parameters.workingDirectory }}
        backendServiceArm: ${{ parameters.backendServiceArm }}
        backendAzureRmResourceGroupName: ${{ parameters.backendAzureRmResourceGroupName }}
        backendAzureRmStorageAccountName: ${{ parameters.backendAzureRmStorageAccountName }}
        backendAzureRmContainerName: ${{ parameters.backendAzureRmContainerName }}
        backendAzureRmKey: ${{ parameters.backendAzureRmKey }}

    # Terraform Plan
    - task: TerraformTaskV2@2
      displayName: terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: ${{ parameters.workingDirectory }}
        commandOptions: >
          -var environment=${{ parameters.environment }}
          -out=${{ parameters.backendAzureRmKey }}
        environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}

    # Detect Changes in Plan
    - task: PowerShell@2
      displayName: Detect Terraform changes
      inputs:
        workingDirectory: ${{ parameters.workingDirectory }}
        targetType: 'inline'
        script: |
          Write-Host ">>> Checking for Terraform changes..."
          $plan = terraform show -json "${{ parameters.backendAzureRmKey }}" | ConvertFrom-Json
          $actions = $plan.resource_changes.change.actions
          if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update')) {
            Write-Host "Terraform will perform the following actions: $actions"
            Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
          } else {
            Write-Host "No Terraform changes detected."
            Write-Host "##vso[task.setvariable variable=anyTfChanges;]false"
          }

    # Terraform Apply (only if changes exist)
    - task: TerraformTaskV2@2
      displayName: terraform apply
      condition: eq(variables['anyTfChanges'], 'true')
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: ${{ parameters.workingDirectory }}
        commandOptions: ${{ parameters.backendAzureRmKey }}
        environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}
